import * as yup from 'yup';
import _ from 'lodash';
import Log from 'stream-logger';

const log = new Log({component: "EventPuller"});

const schema = yup.object().shape({
  address: yup.string().required("Missing contract address"),
  web3Factory: yup.object().required("Missing web3Factory"),
  normalizer: yup.object().required("Missing event normalizer")
});

export default class EventPuller {
  constructor(props) {
    schema.validateSync(props);
    this.abi = props.abi;
    this.web3Factory = props.web3Factory;
    this.options = props.options;
    this.eventName = props.eventName;
    this.normalizer = props.normalizer;
    this.address = props.address;
    [
      'pullEvents',
      '_doPull'
    ].forEach(fn=>this[fn]=this[fn].bind(this));
  }

  pullEvents({fromBlock, toBlock}, cb) {
    return new Promise(async (done,err)=>{
      let web3 = this.web3Factory();
      let contract = new web3.eth.Contract(this.abi, this.address, {address: this.address});

      let ctx = {
        start: fromBlock,
        end: toBlock,
        history: {},
        increment: 0,
        finalEnd: toBlock,
        web3,
        contract,
        done,
        err
      };
      this._doPull(ctx, cb);
    });
  }

  async _doPullOnly(ctx, cb) {
    let span = ctx.end - ctx.start;
    log.info("Querying for logs in range", ctx.start, "-", ctx.end);
    let config = {
      ...this.options,
      fromBlock: ctx.start,
      toBlock: ctx.end,
      address: this.address
    };

    try {
      let web3 = ctx.web3;
      let contract = ctx.contract;

      let evtName = this.eventName || "allEvents";
      let start = Date.now();
      let events = await contract.getPastEvents(evtName, config);
      log.info("Retrieved", events.length, "events in", (Date.now()-start),"ms");
      cb(null, events);

      if(ctx.finalEnd > ctx.end) {
        //means we had to split into sub-queries
        let next = {
          ...ctx,
          start: ctx.end+1,
          end: ctx.end + 1 + Math.ceil(ctx.increment)
        };
        log.debug("Going to next pull segment", next);
        return this._doPullOnly(next, cb)

      } else {
        log.debug("Finished all segments");
        ctx.done();
      }

    } catch (e) {
      if(e.message.includes("more than 1000 results")) {
        log.info("Have to split query apart");
        if(span <= 1) {
          //we've already reduced it as much as we can reduce
          //the span so have to bail out.
          throw e;
        }
        //otherwise, cut the span in 1/2 and try again
        let newSpan = Math.ceil(span/2);
        if(newSpan === 0) {
          throw e;
        }

        if(newSpan + ctx.start === ctx.start) {
          throw e;
        }

        return this._doPullOnly({
          ...ctx,
          increment: newSpan,
          end: newSpan + ctx.start
        }, cb);
      } else {
        log.error("Problem pulling events", e);
        ctx.err(e);
      }
    }
  }

  async _doPull(ctx, cb) {
    let span = ctx.end - ctx.start;
    log.info("Querying for logs in range", ctx.start, "-", ctx.end);
    let config = {
      ...this.options,
      fromBlock: ctx.start,
      toBlock: ctx.end,
      address: this.address
    };

    try {
      let web3 = ctx.web3;
      let contract = ctx.contract;

      let evtName = this.eventName || "allEvents";
      let start = Date.now();
      let events = await contract.getPastEvents(evtName, config);
      log.info("Retrieved", events.length, "events in", (Date.now()-start),"ms");

      //make sure we're sorted by ascending block number
      /*events.sort((a,b)=>{
        return a.blockNumber - b.blockNumber
      });*/

      let byBlock = events.reduce((o,e)=>{
        let byHash = o[e.blockNumber] || {};
        let hash = e.transactionHash.toLowerCase();
        let bundle = byHash[hash] || {
          blockNumber: e.blockNumber,
          events: []
        }
        bundle.events.push(e);

        byHash[hash] = bundle;
        o[e.blockNumber] = byHash;
        return o;
      },{});

      let blocks = _.keys(byBlock);
      for(let i=0;i<blocks.length;++i) {
        let bS = Date.now();

        let num = blocks[i];
        let fromChain = await web3.eth.getBlock(num);
        let byHash = byBlock[num];
        let time = 0;
        if(fromChain) {
          time = fromChain.timestamp;
        } else {
          time = Math.floor(Date.now()/1000);
        }
        let txnHashes = _.keys(byHash);
        for(let j=0;j<txnHashes.length;++j) {
          let txnHash = txnHashes[j].toLowerCase();

          let bundle = byHash[txnHash];
          let bCtx = {
            web3,
            history: {}
          };
          let eS = Date.now();
          for(let k=0;k<bundle.events.length;++k) {
            await this.normalizer.normalize(bCtx, bundle.events[k]);
          }
          let diff = Date.now()-eS;
          log.info("Normalized", bundle.events.length,"events in",diff,"ms");

          let txn = bCtx.history[txnHash];
          if(txn) {
            txn.timestamp = time;
            await cb(null, txn);
          }
        }
        log.info("Processed block of txns in ", (Date.now()-bS),"ms");
      }

      if(ctx.finalEnd > ctx.end) {
        //means we had to split into sub-queries
        let next = {
          ...ctx,
          start: ctx.end+1,
          end: ctx.end + 1 + Math.ceil(ctx.increment)
        };
        log.debug("Going to next pull segment", next);
        return this._doPull(next, cb)

      } else {
        log.debug("Finished all segments");
        ctx.done();
      }

    } catch (e) {
      if(e.message.includes("more than 1000 results")) {
        log.info("Have to split query apart");
        if(span <= 1) {
          //we've already reduced it as much as we can reduce
          //the span so have to bail out.
          throw e;
        }
        //otherwise, cut the span in 1/2 and try again
        let newSpan = Math.ceil(span/2);
        if(newSpan === 0) {
          throw e;
        }

        if(newSpan + ctx.start === ctx.start) {
          throw e;
        }

        return this._doPull({
          ...ctx,
          increment: newSpan,
          end: newSpan + ctx.start
        }, cb);
      } else {
        log.error("Problem pulling events", e);
        ctx.err(e);
      }
    }
  }
}
