{"version":3,"sources":["../src/LocalFSStorage.js"],"names":["homedir","require","baseDir","path","join","_read","dbName","f","fs","existsSync","data","readFileSync","encoding","JSON","parse","_write","mkdirSync","recursive","stringify","writeFileSync","execCallback","prom","cb","then","r","catch","e","asProm","Promise","done","err","fn","LocalFSDriver","_driver","forEach","bind","options","name","callback","p","key","iterator","successCallback","keys","_","sort","k","i","v","n","length","value"],"mappings":"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","file":"LocalFSStorage.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\n\nconst homedir = require('os').homedir();\nconst baseDir = path.join(homedir, \"log_event_streams\");\nconst _read = (dbName) => {\n  const f = path.join(baseDir, dbName);\n  if(fs.existsSync(f)) {\n    let data = fs.readFileSync(f, {encoding: \"utf8\"});\n    return JSON.parse(data);\n  }\n  return {}\n}\n\nconst _write = (dbName, data) => {\n  if(!fs.existsSync(baseDir)) {\n    fs.mkdirSync(baseDir, {recursive: true});\n  }\n  const f = path.join(baseDir, dbName);\n\n  if(typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  fs.writeFileSync(f, data);\n}\n\nconst execCallback = (prom, cb) => {\n  if(typeof cb !== 'function') {\n    return;\n  }\n\n  prom.then(r=>cb(null, r))\n      .catch(e=>cb(e));\n}\n\nconst asProm = fn => {\n  return new Promise((done,err)=>{\n    try {\n      let r = fn()\n      done(r);\n    } catch (e) {\n      err(e);\n    }\n  });\n}\n\nexport default class LocalFSDriver {\n  constructor() {\n    this._driver = 'localFSDriver';\n    this.data = {};\n    [\n      '_initStorage',\n      'clear',\n      'getItem',\n      'iterate',\n      'key',\n      'keys',\n      'length',\n      'removeItem',\n      'setItem'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  _initStorage(options) {\n    return asProm(()=>{\n      this.dbName = options.name;\n      this.data = _read(options.name);\n    })\n  }\n\n  clear(callback) {\n    let p = asProm(()=>{\n      this.data = {};\n      _write(this.dbName, this.data);\n    });\n    execCallback(p, callback);\n    return p;\n  }\n\n  getItem(key, callback) {\n      let p = asProm(()=>{\n        return this.data[key];\n      });\n      execCallback(p, callback);\n      return p;\n  }\n  iterate(iterator, successCallback) {\n      let p = asProm(()=>{\n        let keys = _.keys(this.data);\n        keys.sort();\n        keys.forEach((k,i)=>{\n          let v = this.data[k];\n          iterator(v, k, i);\n        });\n      });\n      execCallback(p, successCallback);\n      return p;\n  }\n\n  key(n, callback) {\n      let p = asProm(()=>{\n        let keys = _.keys(this.data);\n        keys.sort();\n        let k = keys[n];\n        return this.data[k];\n      });\n      execCallback(p, callback);\n      return p;\n  }\n\n  keys(callback) {\n      let p = asProm(()=>{\n        let keys = _.keys(this.data);\n        keys.sort();\n        return keys;\n      });\n      execCallback(p, callback);\n      return p;\n  }\n\n  length(callback) {\n      let p = asProm(()=>{\n        let keys = _.keys(this.data);\n        return keys.length;\n      });\n      execCallback(p, callback);\n      return p;\n  }\n\n  removeItem(key, callback) {\n      let p = asProm(()=>{\n        if(this.data[key]) {\n          delete this.data[key];\n          _write(this.dbName, this.data);\n        }\n      });\n      execCallback(p, callback);\n      return p;\n  }\n\n  setItem(key, value, callback) {\n      let p = asProm(()=>{\n        this.data[key] = value;\n        _write(this.dbName, this.data);\n      });\n      execCallback(p, callback);\n      return p;\n  }\n}\n"]}