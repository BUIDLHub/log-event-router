{"version":3,"sources":["../src/BaseDB.js"],"names":["yup","dbBaseSchema","string","required","storeSchema","object","shape","database","key","data","storeBulkSchema","items","array","of","value","sortSchema","field","order","readSchema","limit","number","sort","findSchema","selector","nullable","removeSchema","updateSchema","readAllSchema","iterateSchema","sortData","ar","def","a","b","fld","o","toUpperCase","isAsc","av","bv","BaseDB","props","dbs","next","undefined","forEach","fn","bind","factory","db","name"],"mappings":";;;;;;;;;AAAA;;IAAYA,G;;;;;;;;AAEZ,IAAMC,eAAeD,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB,CAArB;;AAEO,IAAMC,oCAAcJ,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC5C;AACAC,YAAUN,YAFkC;;AAI5C;AACAO,OAAKR,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CALuC;;AAO5C;AACAM,QAAMT,IAAIK,MAAJ,GAAaF,QAAb,CAAsB,8BAAtB;AARsC,CAAnB,CAApB;;AAWA,IAAMO,4CAAkBV,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAChDC,YAAUN,YADsC;;AAGhDU,SAAOX,IAAIY,KAAJ,GAAYC,EAAZ,CAAeb,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AACvCE,SAAKR,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CADkC;AAEvCW,WAAOd,IAAIK,MAAJ,GAAaF,QAAb,CAAsB,+BAAtB;AAFgC,GAAnB,CAAf;AAHyC,CAAnB,CAAxB;;AASA,IAAMY,kCAAaf,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC3CU,SAAOhB,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CADoC;AAE3Cc,SAAOjB,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,eAAtB;AAFoC,CAAnB,CAAnB;;AAKA,IAAMe,kCAAalB,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;;AAE3CC,YAAUN,YAFiC;;AAI3C;AACAO,OAAKR,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CALsC;;AAO3CgB,SAAOnB,IAAIoB,MAAJ,EAPoC;;AAS3CC,QAAMrB,IAAIY,KAAJ,GAAYC,EAAZ,CAAeE,UAAf;AATqC,CAAnB,CAAnB;;AAYA,IAAMO,kCAAatB,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,YAAUN,YADiC;;AAG3CsB,YAAUvB,IAAIK,MAAJ,GAAaF,QAAb,CAAsB,2CAAtB,CAHiC;;AAK3CgB,SAAOnB,IAAIoB,MAAJ,EALoC;;AAO3CC,QAAMrB,IAAIY,KAAJ,GAAYC,EAAZ,CAAeE,UAAf,EAA2BS,QAA3B;AAPqC,CAAnB,CAAnB;;AAUA,IAAMC,sCAAezB,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC7CC,YAAUN,YADmC;AAE7CO,OAAKR,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,uCAAtB;AAFwC,CAAnB,CAArB;;AAKA,IAAMuB,sCAAe1B,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC7CC,YAAUN,YADmC;AAE7CO,OAAKR,IAAIE,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CAFwC;AAG7CM,QAAMT,IAAIK,MAAJ,GAAaF,QAAb,CAAsB,wBAAtB;AAHuC,CAAnB,CAArB;;AAMA,IAAMwB,wCAAgB3B,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC9CC,YAAUN,YADoC;AAE9CkB,SAAOnB,IAAIoB,MAAJ,EAFuC;AAG9CC,QAAMrB,IAAIY,KAAJ,GAAYC,EAAZ,CAAeE,UAAf;AAHwC,CAAnB,CAAtB;;AAMA,IAAMa,wCAAgB5B,IAAIK,MAAJ,GAAaC,KAAb,CAAmB;AAC9CC,YAAUN;AADoC,CAAnB,CAAtB;;AAIA,IAAM4B,8BAAW,SAAXA,QAAW,CAACC,EAAD,EAAKC,GAAL,EAAa;AACnCD,KAAGT,IAAH,CAAQ,UAACW,CAAD,EAAGC,CAAH,EAAO;AACb,QAAIC,MAAMH,IAAIf,KAAd;AACA,QAAImB,IAAIJ,IAAId,KAAJ,CAAUmB,WAAV,EAAR;AACA,QAAIC,QAAQF,MAAM,KAAlB;AACA,QAAIG,KAAKN,EAAEE,GAAF,CAAT;AACA,QAAIK,KAAKN,EAAEC,GAAF,CAAT;AACA,QAAGI,KAAKC,EAAR,EAAY;AACV,aAAOF,QAAM,CAAN,GAAQ,CAAC,CAAhB;AACD;AACD,QAAGC,KAAKC,EAAR,EAAY;AACV,aAAOF,QAAM,CAAC,CAAP,GAAS,CAAhB;AACD;AACD,WAAO,CAAP;AACD,GAbD;AAcD,CAfM;;IAiBcG,M;AAEnB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,SAAKC,GAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAYF,QAAMA,MAAME,IAAZ,GAAiBC,SAA7B;AACA,QAAG,CAAC,KAAKD,IAAT,EAAe;AACb,WAAKA,IAAL,GAAY,EAAZ;AACD;;AAED,KACE,QADF,EAEEE,OAFF,CAEU,cAAI;AACZ,YAAKC,EAAL,IAAS,MAAKA,EAAL,EAASC,IAAT,CAAc,KAAd,CAAT;AACD,KAJD;AAKD;;;;;0FAEYN,K,EAAOO,O;;;;;;AACdC,kB,GAAK,KAAKP,GAAL,CAASD,MAAMlC,QAAf,C;;oBACL0C,E;;;;;;uBACSD,QAAQ,EAACE,MAAMT,MAAMlC,QAAb,EAAR,C;;;AAAX0C,kB;;AACA,qBAAKP,GAAL,CAASD,MAAMlC,QAAf,IAA2B0C,EAA3B;;;iDAEKA,E;;;;;;;;;;;;;;;;;;;;;kBAtBUT,M","file":"BaseDB.js","sourcesContent":["import * as yup from 'yup';\n\nconst dbBaseSchema = yup.string().required(\"Missing database parameter\");\n\nexport const storeSchema = yup.object().shape({\n  //database where to store the data\n  database: dbBaseSchema,\n\n  //key to use for primary id\n  key: yup.string().required(\"Need a key to store data\"),\n\n  //the data to store\n  data: yup.object().required(\"Missing data object to store\")\n});\n\nexport const storeBulkSchema = yup.object().shape({\n  database: dbBaseSchema,\n\n  items: yup.array().of(yup.object().shape({\n    key: yup.string().required(\"Need a key to store data\"),\n    value: yup.object().required(\"Missing value object to store\")\n  }))\n});\n\nexport const sortSchema = yup.object().shape({\n  field: yup.string().required(\"Missing sort field name\"),\n  order: yup.string().required(\"Missing order\")\n});\n\nexport const readSchema = yup.object().shape({\n\n  database: dbBaseSchema,\n\n  //or directly with key\n  key: yup.string().required(\"Missing key to read by id\"),\n\n  limit: yup.number(),\n\n  sort: yup.array().of(sortSchema)\n});\n\nexport const findSchema = yup.object().shape({\n  database: dbBaseSchema,\n\n  selector: yup.object().required(\"Must have a selector for finding by field\"),\n\n  limit: yup.number(),\n\n  sort: yup.array().of(sortSchema).nullable()\n});\n\nexport const removeSchema = yup.object().shape({\n  database: dbBaseSchema,\n  key: yup.string().required(\"Need key to remove data from database\")\n});\n\nexport const updateSchema = yup.object().shape({\n  database: dbBaseSchema,\n  key: yup.string().required(\"Missing database key\"),\n  data: yup.object().required(\"Missing data to update\")\n});\n\nexport const readAllSchema = yup.object().shape({\n  database: dbBaseSchema,\n  limit: yup.number(),\n  sort: yup.array().of(sortSchema)\n});\n\nexport const iterateSchema = yup.object().shape({\n  database: dbBaseSchema\n});\n\nexport const sortData = (ar, def) => {\n  ar.sort((a,b)=>{\n    let fld = def.field;\n    let o = def.order.toUpperCase();\n    let isAsc = o === 'ASC';\n    let av = a[fld];\n    let bv = b[fld];\n    if(av > bv) {\n      return isAsc?1:-1;\n    }\n    if(av < bv) {\n      return isAsc?-1:1;\n    }\n    return 0;\n  })\n}\n\nexport default class BaseDB {\n\n  constructor(props) {\n    this.dbs  = {};\n    this.next = props?props.next:undefined;\n    if(!this.next) {\n      this.next = {}\n    };\n\n    [\n      '_getDB'\n    ].forEach(fn=>{\n      this[fn]=this[fn].bind(this);\n    });\n  }\n\n  async _getDB(props, factory) {\n    let db = this.dbs[props.database];\n    if(!db) {\n      db = await factory({name: props.database});\n      this.dbs[props.database] = db;\n    }\n    return db;\n  }\n}\n"]}