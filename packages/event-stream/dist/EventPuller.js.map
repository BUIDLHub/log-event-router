{"version":3,"sources":["../src/EventPuller.js"],"names":["yup","schema","object","shape","address","string","required","web3","normalizer","EventPuller","props","validateSync","abi","options","eventName","contract","eth","Contract","forEach","fn","bind","cb","fromBlock","toBlock","Promise","done","err","ctx","start","end","history","increment","finalEnd","_doPull","span","config","evtName","Date","now","getPastEvents","events","console","log","length","sort","a","b","blockNumber","block","currentBlock","transactions","i","evt","_","values","transactionIndex","normalize","_doStart","Math","ceil","message","includes"],"mappings":"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","file":"EventPuller.js","sourcesContent":["import * as yup from 'yup';\nimport _ from 'lodash';\n\nconst schema = yup.object().shape({\n  address: yup.string().required(\"Missing contract address\"),\n  web3: yup.object().required(\"Missing web3\"),\n  normalizer: yup.object().required(\"Missing event normalizer\")\n});\n\nexport default class EventPuller {\n  constructor(props) {\n    schema.validateSync(props);\n    this.abi = props.abi;\n    this.web3 = props.web3;\n    this.options = props.options;\n    this.eventName = props.eventName;\n    this.normalizer = props.normalizer;\n    this.address = props.address;\n    this.contract = new this.web3.eth.Contract(this.abi, this.address, {address: this.address});\n    [\n      'pullEvents',\n      '_doPull'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  pullEvents({fromBlock, toBlock}, cb) {\n    return new Promise(async (done,err)=>{\n      let ctx = {\n        start: fromBlock,\n        end: toBlock,\n        history: {},\n        increment: 0,\n        finalEnd: toBlock,\n        done,\n        err\n      };\n      this._doPull(ctx, cb);\n    });\n  }\n\n  async _doPull(ctx, cb) {\n    let span = ctx.end - ctx.start;\n\n    let config = {\n      ...this.options,\n      fromBlock: ctx.start,\n      toBlock: ctx.end,\n      address: this.address\n    };\n\n    try {\n      let evtName = this.eventName || \"allEvents\";\n      let start = Date.now();\n      let events = await this.contract.getPastEvents(evtName, config);\n      console.log(\"Retrieved\", events.length,\"events in\",(Date.now()-start),\"ms\");\n\n      //make sure we're sorted by ascending block number\n      events.sort((a,b)=>{\n        return a.blockNumber - b.blockNumber\n      });\n\n      //now with sorted blocks, we can normalize and then announce based on\n      //block changes\n      let block = events.length>0?events[0].blockNumber:0;\n      let currentBlock = {\n        blockNumber: block,\n        transactions: []\n      };\n\n      for(let i=0;i<events.length;++i) {\n        let evt = events[i];\n        \n        if(evt.blockNumber !== block) {\n          //new block, convert what we've built up to transaction set\n          currentBlock.transactions = _.values(ctx.history);\n          //ordered by txn index\n          currentBlock.transactions.sort((a,b)=>{\n            return a.transactionIndex - b.transactionIndex\n          });\n          try {\n            await cb(null, currentBlock);\n          } catch (e) {\n            console.log(\"Problem sending event block to callback\", e);\n          }\n          currentBlock = {\n            blockNumber: evt.blockNumber,\n            transactions: []\n          };\n          ctx.history = {};\n          block = evt.blockNumber;\n        }\n        try {\n          await this.normalizer.normalize(evt,ctx.history);\n        } catch (e) {\n          console.log(\"Problem normalizing\", e);\n        }\n\n      }\n\n      if(_.values(ctx.history).length > 0) {\n        //new block, convert what we've built up to transaction set\n        currentBlock.transactions = _.values(ctx.history);\n        //ordered by txn index\n        currentBlock.transactions.sort((a,b)=>{\n          return a.transactionIndex - b.transactionIndex\n        });\n        try {\n          await cb(null, currentBlock);\n        } catch (e) {\n          console.log(\"Problem sending event block to callback\", e);\n        }\n      }\n\n      if(ctx.finalEnd !== ctx.end) {\n        //means we had to split into sub-queries\n        return this._doStart({\n          ...ctx,\n          end: Math.ceil(ctx.increment) + ctx.start\n        }, cb)\n      } else {\n        ctx.done();\n      }\n    } catch (e) {\n      if(e.message.includes(\"more than 1000 results\")) {\n        if(span <= 1) {\n          //we've already reduced it as much as we can reduce\n          //the span so have to bail out.\n          throw e;\n        }\n        //otherwise, cut the span in 1/2 and try again\n        return this._doStart({\n          ...ctx,\n          increment: span,\n          end: Math.ceil(span/2) + ctx.start\n        }, cb);\n      }\n    }\n  }\n}\n"]}