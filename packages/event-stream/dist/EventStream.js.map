{"version":3,"sources":["../src/EventStream.js"],"names":["yup","schema","object","shape","web3","required","address","string","EventStream","props","validateSync","options","eventName","abi","Array","isArray","Error","contract","eth","Contract","normalizer","EventNormalizer","eventPuller","EventPuller","router","Router","errorHandler","emit","e","forEach","fn","bind","use","arguments","fromBlock","console","log","cb","block","process","getBlockNumber","latest","start","span","pullEvents","toBlock","sub","subscribe","lastBlock","on","number","blockNumber","normalizedBlock","unsubscribe","EventEmitter"],"mappings":"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","file":"EventStream.js","sourcesContent":["import EventEmitter from 'events';\nimport EventNormalizer from './EventNormalizer';\nimport EventPuller from './EventPuller';\nimport Router from './Router';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  web3: yup.object().required(\"Missing event stream web3\"),\n  address: yup.string().required(\"Missing contract address for event stream\")\n});\n\nexport default class EventStream extends EventEmitter {\n  constructor(props) {\n    super();\n    schema.validateSync(props);\n\n    this.address = props.address;\n    this.web3 = props.web3;\n    this.options = props.options;\n    this.eventName = props.eventName;\n\n    let abi = props.abi;\n    if(!Array.isArray(abi)) {\n      throw new Error(\"ABI is expected to be an array of field/event defs\");\n    }\n    //creating a contract has a side-effect of adding abi signature to every\n    //function/event definition. We need these later to extract the function\n    //context of event bundles.\n    this.contract = new this.web3.eth.Contract(abi, this.address, {address: this.address});\n\n    this.normalizer = new EventNormalizer({\n      abi,\n      web3: this.web3\n    });\n    this.eventPuller = new EventPuller({\n      abi,\n      options: this.options,\n      eventName: this.eventName,\n      address: this.address,\n      web3: this.web3,\n      normalizer: this.normalizer\n    });\n    this.router = new Router({errorHandler: e=>this.emit(\"error\", e)});\n\n    [\n      'start',\n      'use',\n      'stop'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  use() {\n    this.router.use(...arguments);\n  }\n\n  async start({fromBlock}) {\n    if(fromBlock < 0) {\n      fromBlock = 0;\n    }\n\n    console.log(\"Scanning from block\", fromBlock);\n\n    let cb = async (e, block) => {\n      try {\n        console.log(\"Received block\", block);\n        await this.router.process({}, block);\n      } catch (e) {\n        console.log(\"Problem routing data\", e);\n        this.emit(\"error\", e);\n      }\n    };\n\n    //first need to recover missed events since last run\n    let latest = await this.web3.eth.getBlockNumber();\n    let start = fromBlock;\n    let span = latest - start;\n    while(span > 0) {\n      //keep trying until we've closed the gap with the latest\n      //block\n      await this.eventPuller.pullEvents({\n        fromBlock: start,\n        toBlock: latest\n      }, cb);\n\n      //reset the start for next iteration\n      start = latest+1;\n\n      //grab the latest right now\n      latest = await this.web3.eth.getBlockNumber();\n\n      //compute new span\n      span = latest - start;\n    }\n\n    console.log(\"Finished recovering past events\");\n\n    //now subscribe to new blocks and trigger event pulls on each\n    //new block\n    this.sub = this.web3.eth.subscribe(\"newBlockHeaders\")\n    let lastBlock = latest;\n    this.sub.on(\"data\", async (block)=>{\n      if(block) {\n        console.log(\"Receiving new block\", block.number);\n        let start = lastBlock;\n        lastBlock = block.blockNumber;\n        await this.eventPuller.pullEvents({\n          fromBlock: start,\n          toBlock: block.blockNumber\n        }, async (e, normalizedBlock)=>{\n          try {\n            await this.router.process({}, normalizedBlock);\n          } catch (er) {\n            this.emit(\"error\", er);\n          }\n        });\n      }\n    });\n  }\n\n  async stop() {\n    if(this.sub) {\n      await this.sub.unsubscribe();\n      this.sub = null;\n    }\n  }\n}\n"]}